// useSuggestionApi.spec.js

import { renderHook, act } from '@testing-library/react-hooks';
import useSuggestionHelper from '../hooks/qeassist/useSuggestionApi';
import { useSelector } from 'react-redux';

jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
}));

global.fetch = jest.fn();

const mockSetLmResponse = jest.fn();

const mockStoryPayload = [
  {
    user_story_id: 'US5348674',
    user_story_name: 'RSS: Migrate UK Processing Bank from Barclays to Citi 1',
    user_story_description: 'As a PO I would like team to complete: File Tys.',
    user_story_acceptance_criteria: 'In order for this story to be accepted k',
    user_story_objectId: '812879429659',
    user_story_reference: 'https://rally1.rallydev.com/slm/webservice/v2.0/hierarchicalrequirement/812879429659',
  },
];

const mockStoryResponse = {
  message: 'Suggested User Stories Generated successfully',
  data: [
    {
      user_story_id: 'US5348674',
      Suggested_User_story: 'Refined User Story',
      Business_Objective: 'Ensure seamless migration',
      User_Roles: 'Product Owner (PO): Overseas',
      Description: 'As a Product Owner, I want...',
      Acceptance_Criteria: 'File updates...',
    },
  ],
};

const mockFeaturePayload = [
  {
    feature_id: 'F780672',
    feature_name: 'RSS: Migrate UK Processing Bank from Barclays to Citi',
    feature_description: 'As a product owner, I need RSS...',
    feature_acceptance_criteria: 'In order for this feature to be marked',
    user_stories: [],
    feature_objectId: '812879424619',
    feature_reference: 'https://rally1.rallydev.com/slm/webservice/v2.0/portfolioitem/feature/812879424619',
  },
];

const mockFeatureResponse = {
  message: 'Suggested Feature Generated successfully',
  data: [
    {
      feature_id: 'F780672',
      Suggested_Feature: '1. Business Objective',
      Description: 'This feature involves migrating...',
    },
  ],
};


describe('useSuggestionHelper', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    useSelector.mockReturnValue('https://qeassist-dev.aexp.com');
  });

  it('handles successful story suggestion fetch', async () => {
    fetch.mockResolvedValueOnce({
      status: 200,
      json: async () => mockStoryResponse,
    });

    const { result, waitForNextUpdate } = renderHook(() =>
      useSuggestionHelper({
        artifactType: 'story',
        llmPayload: mockStoryPayload,
        setLmResponse: mockSetLmResponse,
      })
    );

    await act(async () => {
      await result.current.getSuggestion();
    });

    expect(fetch).toHaveBeenCalledTimes(1);
    expect(result.current.isSuggestionLoading).toBe(false);
    expect(mockSetLmResponse).toHaveBeenCalled();
    expect(result.current.suggestionData.status).toBe(200);
  });

  it('handles successful feature suggestion fetch', async () => {
    fetch.mockResolvedValueOnce({
      status: 200,
      json: async () => mockFeatureResponse,
    });

    const { result } = renderHook(() =>
      useSuggestionHelper({
        artifactType: 'feature',
        llmPayload: mockFeaturePayload,
        setLmResponse: mockSetLmResponse,
      })
    );

    await act(async () => {
      await result.current.getSuggestion();
    });

    expect(result.current.isSuggestionLoading).toBe(false);
    expect(mockSetLmResponse).toHaveBeenCalled();
    expect(result.current.suggestionData.status).toBe(200);
  });

  it('handles error response from API', async () => {
    fetch.mockResolvedValueOnce({
      status: 500,
      json: async () => ({ error: 'Something went wrong' }),
    });

    const { result } = renderHook(() =>
      useSuggestionHelper({
        artifactType: 'story',
        llmPayload: mockStoryPayload,
        setLmResponse: mockSetLmResponse,
      })
    );

    await act(async () => {
      await result.current.getSuggestion();
    });

    expect(result.current.isSuggestionLoading).toBe(false);
    expect(result.current.suggestionData.status).toBe(500);
    expect(mockSetLmResponse).toHaveBeenCalled();
  });

  it('handles exception thrown in fetch', async () => {
    fetch.mockRejectedValueOnce(new Error('Network Error'));

    const { result } = renderHook(() =>
      useSuggestionHelper({
        artifactType: 'feature',
        llmPayload: mockFeaturePayload,
        setLmResponse: mockSetLmResponse,
      })
    );

    await act(async () => {
      await result.current.getSuggestion();
    });

    expect(result.current.suggestionData.status).toBe(500);
    expect(mockSetLmResponse).toHaveBeenCalled();
  });

  it('sets loading state to true on getSuggestion call', async () => {
    fetch.mockResolvedValueOnce({
      status: 200,
      json: async () => mockStoryResponse,
    });

    const { result } = renderHook(() =>
      useSuggestionHelper({
        artifactType: 'story',
        llmPayload: mockStoryPayload,
        setLmResponse: mockSetLmResponse,
      })
    );

    act(() => {
      result.current.getSuggestion();
    });

    expect(result.current.isSuggestionLoading).toBe(true);
  });

  it('sets suggestion "error" on status between 400 and 600', async () => {
    fetch.mockResolvedValueOnce({
      status: 404,
      json: async () => ({}),
    });

    const { result } = renderHook(() =>
      useSuggestionHelper({
        artifactType: 'story',
        llmPayload: mockStoryPayload,
        setLmResponse: mockSetLmResponse,
      })
    );

    await act(async () => {
      await result.current.getSuggestion();
    });

    expect(mockSetLmResponse).toHaveBeenCalledWith(expect.any(Function));
    expect(result.current.suggestionData.status).toBe(404);
  });
});

222222222222222222222222222222


it('sets suggestions to loading for matching ids', async () => {
  fetch.mockResolvedValueOnce({
    status: 200,
    json: async () => mockStoryResponse,
  });

  const initialLmData = [
    {
      user_story_id: 'US5348674',
      suggestions: '',
    },
    {
      user_story_id: 'UNRELATED_ID',
      suggestions: '',
    },
  ];

  const mockSetLmResponseFn = jest.fn((updateFn) => {
    const result = updateFn(initialLmData);
    expect(result).toEqual([
      { user_story_id: 'US5348674', suggestions: 'loading' }, // updated
      { user_story_id: 'UNRELATED_ID', suggestions: '' },     // untouched
    ]);
  });

  const { result } = renderHook(() =>
    useSuggestionHelper({
      artifactType: 'story',
      llmPayload: mockStoryPayload, // has US5348674
      setLmResponse: mockSetLmResponseFn,
    })
  );

  await act(async () => {
    await result.current.getSuggestion();
  });

  expect(mockSetLmResponseFn).toHaveBeenCalled();
});


it('parses feature-type suggestion response using x.data (line 70 coverage)', async () => {
  fetch.mockResolvedValueOnce({
    status: 200,
    json: async () => ({
      message: 'Suggested Feature Generated successfully',
      data: [
        {
          feature_id: 'F780672',
          data: [
            {
              Suggested_Feature: '1. Business Objective',
              Description: 'Migration of UK processing bank...',
            },
          ],
        },
      ],
    }),
  });

  const mockSetLmResponseFn = jest.fn((updateFn) => {
    const result = updateFn([
      { feature_id: 'F780672', suggestions: '' },
    ]);
    expect(result).toEqual([
      {
        feature_id: 'F780672',
        suggestions: [
          {
            Suggested_Feature: '1. Business Objective',
            Description: 'Migration of UK processing bank...',
          },
        ],
      },
    ]);
  });

  const { result } = renderHook(() =>
    useSuggestionHelper({
      artifactType: 'feature',
      llmPayload: mockFeaturePayload,
      setLmResponse: mockSetLmResponseFn,
    })
  );

  await act(async () => {
    await result.current.getSuggestion();
  });

  expect(mockSetLmResponseFn).toHaveBeenCalled();
});

it('handles feature type response with body as array and maps x.data', async () => {
  fetch.mockResolvedValueOnce({
    status: 200,
    json: async () => [
      { data: [{ feature_id: 'F780672', suggestion: 'Feature 1' }] },
      { data: [{ feature_id: 'F780999', suggestion: 'Feature 2' }] },
    ],
  });

  const mockSetLmResponseFn = jest.fn();

  const { result } = renderHook(() =>
    useSuggestionHelper({
      artifactType: 'feature',
      llmPayload: mockFeaturePayload,
      setLmResponse: mockSetLmResponseFn,
    })
  );

  await act(async () => {
    await result.current.getSuggestion();
  });

  expect(mockSetLmResponseFn).toHaveBeenCalled();
});

it('wraps llmPayload in array if not already an array (featurePayload line)', async () => {
  const singleFeaturePayload = {
    feature_id: 'F780672',
    feature_name: 'Single Feature',
    feature_description: 'Just one',
    feature_acceptance_criteria: 'Only one',
    user_stories: [],
    feature_objectId: '812879424619',
    feature_reference: 'https://rally1.rallydev.com/slm/webservice/v2.0/portfolioitem/feature/812879424619',
  };

  fetch.mockResolvedValueOnce({
    status: 200,
    json: async () => ({
      message: 'Single feature handled',
      data: [{ feature_id: 'F780672', suggestion: 'Good feature' }],
    }),
  });

  const mockSetLmResponseFn = jest.fn();

  const { result } = renderHook(() =>
    useSuggestionHelper({
      artifactType: 'feature',
      llmPayload: singleFeaturePayload, // <<--- NOT an array
      setLmResponse: mockSetLmResponseFn,
    })
  );

  await act(async () => {
    await result.current.getSuggestion();
  });

  expect(fetch).toHaveBeenCalledTimes(1);
  const bodySent = JSON.parse(fetch.mock.calls[0][1].body);
  expect(Array.isArray(bodySent.featurePayload)).toBe(true);
  expect(bodySent.featurePayload[0].feature_id).toBe('F780672');
});
