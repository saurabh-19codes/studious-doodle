import { renderHook, act } from '@testing-library/react-hooks';
import { useScoringApi } from './useScoringApi';
import * as redux from 'react-redux';
import * as authData from '../useAuthData';
import { FETCHYE_OPTIONS } from '../../constants';
import { logEvent } from '../../util/logger';

// Mock global fetch
global.fetch = jest.fn();

// Mock redux useSelector
jest.spyOn(redux, 'useSelector');

// Mock authData hooks
jest.spyOn(authData, 'useUserData').mockReturnValue([{ addId: 'user-123' }]);
jest.spyOn(authData, 'useActiveOrg').mockReturnValue([{ code: 'org-456' }]);

jest.mock('../../constants', () => ({
  FETCHYE_OPTIONS: { headers: { 'Content-Type': 'application/json' } }
}));

jest.mock('../../util/logger', () => ({
  logEvent: jest.fn(),
}));

describe('useScoringApi custom hook', () => {
  const mockDispatchSelectors = () => {
    redux.useSelector.mockImplementation((cb) =>
      cb({
        getIn: jest.fn((key) => {
          if (key[1] === 'qeAssistUrl') return 'http://mockapi.com';
          if (key[1] === 'ELFEndpoints') return 'http://elfendpoint.com';
        }),
      })
    );
  };

  beforeEach(() => {
    jest.clearAllMocks();
    mockDispatchSelectors();
  });

  it('should initialize hook with default values', () => {
    const { result } = renderHook(() =>
      useScoringApi({
        artifactType: 'story',
        llmPayload: [],
        setLlmResponse: jest.fn(),
        eventDetails: { event: 'test' },
      })
    );

    expect(result.current.scoringData).toBeNull();
    expect(result.current.isScoringLoading).toBe(false);
    expect(typeof result.current.getScoring).toBe('function');
  });

  it('should call API and set scoring data (success path)', async () => {
    const setLlmResponseMock = jest.fn();
    const mockResponse = {
      status: 200,
      body: {
        Feature_Analysis: [{ user_story_id: 'story1', score: 5 }],
      },
    };

    fetch.mockResolvedValue({
      json: jest.fn().mockResolvedValue(mockResponse),
    });

    const { result } = renderHook(() =>
      useScoringApi({
        artifactType: 'story',
        llmPayload: [{ user_story_id: 'story1' }],
        setLlmResponse: setLlmResponseMock,
        eventDetails: { event: 'test' },
      })
    );

    await act(async () => {
      await result.current.getScoring();
    });

    expect(fetch).toHaveBeenCalledWith(
      'http://mockapi.com/api/analyze/story',
      expect.objectContaining({
        method: 'POST',
        headers: FETCHYE_OPTIONS.headers,
      })
    );

    expect(result.current.scoringData.status).toBe(200);
    expect(setLlmResponseMock).toHaveBeenCalled();
    expect(logEvent).toHaveBeenCalled();
  });

  it('should handle API error (catch block)', async () => {
    const setLlmResponseMock = jest.fn();
    fetch.mockRejectedValue(new Error('Network error'));

    const { result } = renderHook(() =>
      useScoringApi({
        artifactType: 'feature',
        llmPayload: [{ feature_id: 'feature1' }],
        setLlmResponse: setLlmResponseMock,
        eventDetails: { event: 'error' },
      })
    );

    await act(async () => {
      await result.current.getScoring();
    });

    expect(result.current.scoringData.status).toBe(500);
    expect(setLlmResponseMock).not.toHaveBeenCalled();
  });

  it('should update setLlmResponse on useEffect when status 200', async () => {
    const setLlmResponseMock = jest.fn();
    const scoringData = {
      status: 200,
      body: {
        Feature_Analysis: [{ feature_id: 'f1', score: 10 }],
      },
    };

    const { rerender } = renderHook(
      (props) => useScoringApi(props),
      {
        initialProps: {
          artifactType: 'feature',
          llmPayload: [{ feature_id: 'f1' }],
          setLlmResponse: setLlmResponseMock,
          eventDetails: { event: 'test' },
        },
      }
    );

    // Simulate scoringData update by manually calling rerender
    rerender({
      artifactType: 'feature',
      llmPayload: [{ feature_id: 'f1' }],
      setLlmResponse: setLlmResponseMock,
      eventDetails: { event: 'test' },
    });

    // Directly call setLlmResponse with merged array logic
    expect(setLlmResponseMock).toHaveBeenCalled();
  });

  it('should set score to "error" when scoringData.status >= 400 in useEffect', () => {
    const setLlmResponseMock = jest.fn();

    const { rerender } = renderHook(
      (props) => useScoringApi(props),
      {
        initialProps: {
          artifactType: 'feature',
          llmPayload: [{ feature_id: 'f1' }],
          setLlmResponse: setLlmResponseMock,
          eventDetails: { event: 'test' },
        },
      }
    );

    // simulate scoringData with error
    rerender({
      artifactType: 'feature',
      llmPayload: [{ feature_id: 'f1' }],
      setLlmResponse: setLlmResponseMock,
      eventDetails: { event: 'test' },
    });

    // expect error branch call
    expect(setLlmResponseMock).toHaveBeenCalled();
  });
});
