import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import ConfirmActionModal from './ConfirmActionModal';

describe('ConfirmActionModal', () => {
  const defaultProps = {
    show: true,
    title: 'Test Title',
    message: 'Test message?',
    onConfirm: jest.fn(),
    onCancel: jest.fn(),
  };

  it('renders correctly when show is true', () => {
    render(<ConfirmActionModal {...defaultProps} />);
    expect(screen.getByText('Test Title')).toBeInTheDocument();
    expect(screen.getByText('Test message?')).toBeInTheDocument();
    expect(screen.getByText('Yes')).toBeInTheDocument();
    expect(screen.getByText('No')).toBeInTheDocument();
  });

  it('does not render when show is false', () => {
    render(<ConfirmActionModal {...defaultProps} show={false} />);
    expect(screen.queryByText('Test Title')).not.toBeInTheDocument();
  });

  it('calls onConfirm when Yes is clicked', () => {
    render(<ConfirmActionModal {...defaultProps} />);
    fireEvent.click(screen.getByText('Yes'));
    expect(defaultProps.onConfirm).toHaveBeenCalledTimes(1);
  });

  it('calls onCancel when No is clicked', () => {
    render(<ConfirmActionModal {...defaultProps} />);
    fireEvent.click(screen.getByText('No'));
    expect(defaultProps.onCancel).toHaveBeenCalledTimes(1);
  });
});


import { render, screen, fireEvent } from '@testing-library/react';
import StoryDetailsPopup from '../StoryDetailsPopup';

// Mock props and functions
const mockAcceptStory = jest.fn();
const mockOnCloseModal = jest.fn();

const defaultProps = {
  /* other required props here */
  acceptStory: mockAcceptStory,
  onCloseModal: mockOnCloseModal,
};

describe('StoryDetailsPopup - Confirmation Modal Flow', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('shows confirmation modal when Update Rally is clicked', () => {
    render(<StoryDetailsPopup {...defaultProps} />);
    fireEvent.click(screen.getByText('Update Rally'));
    expect(screen.getByText('Confirm Rally Update')).toBeInTheDocument();
    expect(screen.getByText('Are you sure you want to update the Rally details with the latest changes?')).toBeInTheDocument();
  });

  it('confirms Update Rally and calls acceptStory', () => {
    render(<StoryDetailsPopup {...defaultProps} />);
    fireEvent.click(screen.getByText('Update Rally'));
    fireEvent.click(screen.getByText('Yes'));
    expect(mockAcceptStory).toHaveBeenCalledTimes(1);
  });

  it('cancels Update Rally confirmation', () => {
    render(<StoryDetailsPopup {...defaultProps} />);
    fireEvent.click(screen.getByText('Update Rally'));
    fireEvent.click(screen.getByText('No'));
    expect(screen.queryByText('Confirm Rally Update')).not.toBeInTheDocument();
    expect(mockAcceptStory).not.toHaveBeenCalled();
  });

  it('shows confirmation modal when close is triggered', () => {
    render(<StoryDetailsPopup {...defaultProps} />);
    const modalCloseButton = screen.getByLabelText('Close'); // or data-testid if used
    fireEvent.click(modalCloseButton);
    expect(screen.getByText('Unsaved Changes')).toBeInTheDocument();
    expect(screen.getByText('Your changes have not been saved to Rally. Are you sure you want to close this window?')).toBeInTheDocument();
  });

  it('confirms close and calls onCloseModal', () => {
    render(<StoryDetailsPopup {...defaultProps} />);
    const modalCloseButton = screen.getByLabelText('Close');
    fireEvent.click(modalCloseButton);
    fireEvent.click(screen.getByText('Yes'));
    expect(mockOnCloseModal).toHaveBeenCalledTimes(1);
  });

  it('cancels close confirmation', () => {
    render(<StoryDetailsPopup {...defaultProps} />);
    const modalCloseButton = screen.getByLabelText('Close');
    fireEvent.click(modalCloseButton);
    fireEvent.click(screen.getByText('No'));
    expect(mockOnCloseModal).not.toHaveBeenCalled();
  });
});

