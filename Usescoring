import { renderHook, act } from '@testing-library/react-hooks';
import useScoringApi from '../useScoringApi';
import { useSelector } from 'react-redux';
import * as useUserDataModule from '../../useAuthData';
import * as logger from '../../../util/logger';

global.fetch = jest.fn();

jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
}));

jest.mock('../../useAuthData', () => ({
  useUserData: jest.fn(),
  useActiveOrg: jest.fn(),
}));

jest.mock('uuid', () => ({
  v4: () => 'mock-uuid',
}));

describe('useScoringApi', () => {
  const mockSetLmResponse = jest.fn();
  const qeAssistLlmUrl = 'https://mock-qeapi.com';
  const elfLogUrl = 'https://mock-elf.com';
  const user = { addSid: 'user123' };
  const activeOrg = { code: 'ORG1' };

  beforeEach(() => {
    jest.clearAllMocks();

    useSelector.mockImplementation((selector) =>
      selector({
        config: {
          qeAssistUrl: qeAssistLlmUrl,
          ELFEndpoints: elfLogUrl,
        },
      })
    );

    useUserDataModule.useUserData.mockReturnValue([user]);
    useUserDataModule.useActiveOrg.mockReturnValue([activeOrg]);
  });

  it('should set loading score for requested items and then update with success', async () => {
    const mockPayload = [
      { feature_id: 'f1' },
      { feature_id: 'f2' },
    ];

    const mockApiResponse = {
      status: 200,
      body: {
        Feature_Analysis: [
          { feature_id: 'f1', score: 5 },
          { feature_id: 'f2', score: 7 },
        ],
      },
    };

    fetch.mockResolvedValueOnce({
      json: () => Promise.resolve(mockApiResponse),
    });

    const { result, waitForNextUpdate } = renderHook(() =>
      useScoringApi({
        artifactType: 'feature',
        llmPayload: mockPayload,
        setLmResponse: mockSetLmResponse,
        eventDetails: { key: 'value' },
      })
    );

    act(() => {
      result.current.getScoring();
    });

    // Loading state
    expect(result.current.isScoringLoading).toBe(true);

    await waitForNextUpdate();

    expect(fetch).toHaveBeenCalledWith(
      `${qeAssistLlmUrl}/api/analyze/feature`,
      expect.objectContaining({
        method: 'POST',
        headers: expect.any(Object),
        body: JSON.stringify(mockPayload),
      })
    );

    expect(result.current.scoringData).toEqual(mockApiResponse);
    expect(result.current.isScoringLoading).toBe(false);
  });

  it('should update score with error if API fails', async () => {
    const mockPayload = [{ feature_id: 'f1' }];

    fetch.mockRejectedValueOnce(new Error('Network error'));

    const { result, waitForNextUpdate } = renderHook(() =>
      useScoringApi({
        artifactType: 'feature',
        llmPayload: mockPayload,
        setLmResponse: mockSetLmResponse,
        eventDetails: {},
      })
    );

    act(() => {
      result.current.getScoring();
    });

    await waitForNextUpdate();

    expect(result.current.scoringData).toEqual({
      status: 500,
      body: null,
    });

    expect(result.current.isScoringLoading).toBe(false);
  });

  it('should handle story payload and return user story analysis', async () => {
    const mockPayload = [
      { user_story_id: 'us1' },
      { user_story_id: 'us2' },
    ];

    const mockApiResponse = {
      status: 200,
      body: {
        user_story_analysis: [
          { user_story_id: 'us1', score: 3 },
          { user_story_id: 'us2', score: 4 },
        ],
      },
    };

    fetch.mockResolvedValueOnce({
      json: () => Promise.resolve(mockApiResponse),
    });

    const { result, waitForNextUpdate } = renderHook(() =>
      useScoringApi({
        artifactType: 'story',
        llmPayload: mockPayload,
        setLmResponse: mockSetLmResponse,
        eventDetails: {},
      })
    );

    act(() => {
      result.current.getScoring();
    });

    await waitForNextUpdate();

    expect(result.current.scoringData).toEqual(mockApiResponse);
    expect(result.current.isScoringLoading).toBe(false);
  });

  it('should call logger.logEvent with correlation ID', async () => {
    const logEventSpy = jest.spyOn(logger, 'logEvent');
    const mockPayload = [{ feature_id: 'f1' }];
    const mockApiResponse = {
      status: 200,
      body: {
        Feature_Analysis: [
          { feature_id: 'f1', score: 10 },
        ],
      },
    };

    fetch.mockResolvedValueOnce({
      json: () => Promise.resolve(mockApiResponse),
    });

    const { result, waitForNextUpdate } = renderHook(() =>
      useScoringApi({
        artifactType: 'feature',
        llmPayload: mockPayload,
        setLmResponse: mockSetLmResponse,
        eventDetails: { mock: 'event' },
      })
    );

    act(() => {
      result.current.getScoring();
    });

    await waitForNextUpdate();

    expect(logEventSpy).toHaveBeenCalledWith({
      message: 'QE_Assist',
      event: { mock: 'event' },
      user: user.addSid,
      storyId: [],
      score: [10],
      organization: activeOrg.code,
      correlationId: 'mock-uuid',
      loggedAt: expect.any(Date),
      level: 'INFO',
      url: elfLogUrl,
    });
  });
});


====================================
import { renderHook, act } from '@testing-library/react';
import useScoringApi from '../useScoringApi';
import { useSelector } from 'react-redux';
import * as logger from '../../../utils/logger';
import * as auth from '../../../useAuthData';

jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
}));

jest.mock('../../../useAuthData', () => ({
  useUserData: jest.fn(),
  useActiveOrg: jest.fn(),
}));

global.fetch = jest.fn();

describe('useScoringApi', () => {
  beforeEach(() => {
    jest.clearAllMocks();

    useSelector.mockImplementation((selectorFn) =>
      selectorFn({
        getIn: (path) => {
          if (path.join('.') === 'config.qeAssistUrl') return 'http://mock-qe-url';
          if (path.join('.') === 'config.ELFEndpoints') return 'mock-log-url';
          return null;
        },
      })
    );

    auth.useUserData.mockReturnValue({ addId: 'user123' });
    auth.useActiveOrg.mockReturnValue({ code: 'org1' });

    jest.spyOn(logger, 'logEvent').mockImplementation(jest.fn());
  });

  it('should set loading score for requested items and update with success response', async () => {
    const llmPayload = [{ feature_id: 'f1' }, { feature_id: 'f2' }];

    const mockApiResponse = {
      body: {
        Feature_Analysis: [
          { feature_id: 'f1', score: 7 },
          { feature_id: 'f2', score: 9 },
        ],
      },
      status: 200,
    };

    fetch.mockResolvedValueOnce({
      json: async () => mockApiResponse,
    });

    const setLmResponse = jest.fn();
    const { result, waitForNextUpdate } = renderHook(() =>
      useScoringApi({
        artifactType: 'feature',
        llmPayload,
        setLmResponse,
        eventDetails: 'test-event',
      })
    );

    // Fire getScoring
    await act(async () => {
      await result.current.getScoring();
      await waitForNextUpdate();
    });

    expect(fetch).toHaveBeenCalledWith(
      'http://mock-qe-url/api/analyze/feature',
      expect.objectContaining({
        method: 'POST',
      })
    );

    // Validate loading and final result flow
    expect(setLmResponse).toHaveBeenCalledTimes(2);

    // Loading state
    expect(setLmResponse.mock.calls[0][0]).toEqual(expect.any(Function));
    const loadingResult = setLmResponse.mock.calls[0][0]([]);
    expect(loadingResult).toEqual([
      { feature_id: 'f1', score: 'loading' },
      { feature_id: 'f2', score: 'loading' },
    ]);

    // Final updated score
    const finalUpdate = setLmResponse.mock.calls[1][0];
    const finalResult = finalUpdate([
      { feature_id: 'f1', score: 'loading' },
      { feature_id: 'f2', score: 'loading' },
    ]);
    expect(finalResult).toEqual([
      { feature_id: 'f1', score: 7 },
      { feature_id: 'f2', score: 9 },
    ]);

    // logEvent call
    expect(logger.logEvent).toHaveBeenCalledWith({
      message: 'QE_Assist',
      event: 'test-event',
      user: 'user123',
      storyId: [],
      score: [7, 9],
      organization: 'org1',
      correlationId: expect.any(String),
      loggedAt: expect.any(Date),
    });
  });
});
