it('shows success toast when updateMessageClose is true and handles close', () => {
  const mockSetUpdateMessageClose = jest.fn();
  const mockSetUnauthorizeMessage = jest.fn();

  render(
    <StoryDetailsPopup
      {...baseProps}
      updateMessageClose={true}
      unauthorizeMessage={false}
      setUpdateMessageClose={mockSetUpdateMessageClose}
      setUnauthorizeMessage={mockSetUnauthorizeMessage}
    />
  );

import { render, screen, fireEvent } from '@testing-library/react';
import StoryDetailsPopup from '../StoryDetailsPopup';
import React from 'react';

beforeEach(() => {
  global.URL.createObjectURL = jest.fn(() => 'blob:http://localhost/fake-url');
});

afterEach(() => {
  jest.clearAllMocks();
});

it('should execute generateBlobURL when anchor link is clicked (artifactType: feature)', () => {
  render(
    <StoryDetailsPopup
      artifactType="feature"
      story={{
        title: 'SomeFeatureTitle',
        acceptanceCriteria: '',
        description: '',
      }}
    />
  );

  // Simulate improvement text containing a known keyword like "Risks"
  const improvementText = 'Risks: There are some risks involved.';

  // Manually call formatImprovement and render it (since it's not directly invoked in your component render)
  const { container } = render(<div>{StoryDetailsPopup.prototype.formatImprovement(improvementText)}</div>);

  const anchor = screen.getByTestId('improvement-link');
  expect(anchor).toBeInTheDocument();

  fireEvent.click(anchor);

  expect(URL.createObjectURL).toHaveBeenCalled();
});


  expect(screen.getByText('Feature Updated successfully!')).toBeInTheDocument();

  // Trigger toast close
  fireEvent.click(screen.getByTestId('toast-close-button'));

  expect(mockSetUpdateMessageClose).toHaveBeenCalledWith(false);
  expect(mockSetUnauthorizeMessage).not.toHaveBeenCalled();
});

it('shows error toast when unauthorizeMessage is true and handles close', () => {
  const mockSetUpdateMessageClose = jest.fn();
  const mockSetUnauthorizeMessage = jest.fn();

  render(
    <StoryDetailsPopup
      {...baseProps}
      updateMessageClose={false}
      unauthorizeMessage={true}
      setUpdateMessageClose={mockSetUpdateMessageClose}
      setUnauthorizeMessage={mockSetUnauthorizeMessage}
    />
  );

  expect(screen.getByText('Access Denied!')).toBeInTheDocument();

  // Trigger toast close
  fireEvent.click(screen.getByTestId('toast-close-button'));

  expect(mockSetUnauthorizeMessage).toHaveBeenCalledWith(false);
  expect(mockSetUpdateMessageClose).not.toHaveBeenCalled();
});
import { render, screen, fireEvent } from '@testing-library/react';
import StoryDetailsPopup from '../StoryDetailsPopup';
import '@testing-library/jest-dom';

jest.useFakeTimers();

it('should auto-close update toast after 3 seconds', () => {
  render(<StoryDetailsPopup {...defaultProps} />);

  // Simulate whatever action causes updateMessageClose to become true
  // e.g., clicking Update button
  const updateBtn = screen.getByText(/update rally/i);
  fireEvent.click(updateBtn);

  // Confirm toast appears
  expect(screen.getByText(/update successful/i)).toBeInTheDocument();

  // Fast-forward 3 seconds
  jest.advanceTimersByTime(3000);

  // Confirm toast is removed
  expect(screen.queryByText(/update successful/i)).not.toBeInTheDocument();
});
