it('should merge user_story_analysis data (story branch)', async () => {
  const setLlmResponseMock = jest.fn();

  // Mock API returning user_story_analysis
  fetch.mockResolvedValueOnce({
    json: jest.fn().mockResolvedValue({
      status: 200,
      body: {
        user_story_analysis: [{ user_story_id: 's1', score: 8 }],
      },
    }),
  });

  const { result } = renderHook(() =>
    useScoringApi({
      artifactType: 'story',
      llmPayload: [{ user_story_id: 's1' }],
      setLlmResponse: setLlmResponseMock,
      eventDetails: { event: 'test' },
    })
  );

  await act(async () => {
    await result.current.getScoring();
  });

  expect(setLlmResponseMock).toHaveBeenCalledTimes(2);

  const updaterFn = setLlmResponseMock.mock.calls[1][0];
  const merged = updaterFn([{ user_story_id: 's1' }]);
  expect(merged).toEqual([{ user_story_id: 's1', score: 8 }]);
});

it('should merge Feature_Analysis data (feature branch)', async () => {
  const setLlmResponseMock = jest.fn();

  // Mock API returning Feature_Analysis
  fetch.mockResolvedValueOnce({
    json: jest.fn().mockResolvedValue({
      status: 200,
      body: {
        Feature_Analysis: [{ feature_id: 'f1', score: 10 }],
      },
    }),
  });

  const { result } = renderHook(() =>
    useScoringApi({
      artifactType: 'feature',
      llmPayload: [{ feature_id: 'f1' }],
      setLlmResponse: setLlmResponseMock,
      eventDetails: { event: 'test' },
    })
  );

  // Trigger scoring → sets scoringData → fires useEffect
  await act(async () => {
    await result.current.getScoring();
  });

  // First call = loading, second call = merged
  expect(setLlmResponseMock).toHaveBeenCalledTimes(2);

  // Validate merged data by executing updater
  const updaterFn = setLlmResponseMock.mock.calls[1][0];
  const merged = updaterFn([{ feature_id: 'f1' }]);
  expect(merged).toEqual([{ feature_id: 'f1', score: 10 }]);
});


