it('should return item with suggestions as loading when no match is found (line 23)', async () => {
  fetch.mockResolvedValue({
    status: 200,
    json: async () => ({
      data: {
        data: [{ feature_id: 999, user_story_id: 999, suggestions: ['no match'] }],
      },
    }),
  });

  const testItem = { feature_id: 1, user_story_id: 2 };

  const { result } = renderHook(() =>
    useSuggestionHelper({
      artifactType: 'feature',
      llmPayload: [testItem],
      setLlmResponse: mockSetLlmResponse,
    })
  );

  await act(async () => {
    await result.current.getSuggestion();
  });

  // mapper logic passed to setLlmResponse
  const mapper = mockSetLlmResponse.mock.calls[1][0];

  const response = mapper([testItem]);

  // âœ… Covers line 23: suggestions: 'loading'
  expect(response).toEqual([{ ...testItem, suggestions: 'loading' }]);
});
