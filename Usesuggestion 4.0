import { renderHook, act, waitFor } from '@testing-library/react';
import { useSelector } from 'react-redux';
import { v4 as uuidv4 } from 'uuid';
import useSuggestionHelper from '../useSuggestionHelper';
import { FETCHYE_OPTIONS } from '../../constants';

// Mock dependencies
jest.mock('react-redux');
jest.mock('uuid');
jest.mock('../../constants', () => ({
  FETCHYE_OPTIONS: {
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer token'
    }
  }
}));

// Mock fetch
global.fetch = jest.fn();

describe('useSuggestionHelper', () => {
  const mockQeAssistLmUrl = 'https://api.example.com';
  const mockCorrelationId = 'test-correlation-id-123';

  beforeEach(() => {
    jest.clearAllMocks();
    
    // Mock useSelector to return the API URL
    useSelector.mockReturnValue(mockQeAssistLmUrl);
    
    // Mock uuid generation
    uuidv4.mockReturnValue(mockCorrelationId);
    
    // Reset fetch mock
    fetch.mockClear();
  });

  afterEach(() => {
    jest.restoreAllMocks();
  });

  describe('Initial State', () => {
    it('should return initial state correctly', () => {
      const { result } = renderHook(() => useSuggestionHelper({
        artifactType: 'story',
        llmPayload: [],
        setLlmResponse: jest.fn()
      }));

      expect(result.current.isSuggestionLoading).toBe(false);
      expect(result.current.suggestionData).toBe(null);
      expect(typeof result.current.getSuggestion).toBe('function');
    });
  });

  describe('getSuggestion - Story Type', () => {
    const mockLlmPayload = [
      { id: 1, feature_id: 'feat-1', user_story_id: 'story-1' },
      { id: 2, feature_id: 'feat-2', user_story_id: 'story-2' }
    ];

    it('should successfully fetch suggestions for story type', async () => {
      const mockSetLlmResponse = jest.fn();
      const mockResponseData = {
        suggestions: ['Suggestion 1', 'Suggestion 2']
      };

      fetch.mockResolvedValueOnce({
        ok: true,
        status: 200,
        json: async () => mockResponseData
      });

      const { result } = renderHook(() => useSuggestionHelper({
        artifactType: 'story',
        llmPayload: mockLlmPayload,
        setLlmResponse: mockSetLlmResponse
      }));

      await act(async () => {
        await result.current.getSuggestion();
      });

      // Verify fetch was called with correct parameters
      expect(fetch).toHaveBeenCalledWith(
        `${mockQeAssistLmUrl}/api/suggest/story`,
        {
          method: 'POST',
          headers: {
            ...FETCHYE_OPTIONS.headers,
            'X-Correlation-ID': mockCorrelationId
          },
          body: JSON.stringify({
            artifactType: 'story',
            user_stories: mockLlmPayload
          })
        }
      );

      // Verify state updates
      expect(result.current.isSuggestionLoading).toBe(false);
      expect(result.current.suggestionData).toEqual({
        status: 200,
        body: mockResponseData
      });
    });

    it('should set loading states correctly during story API call', async () => {
      const mockSetLlmResponse = jest.fn();
      let resolvePromise;
      
      const mockPromise = new Promise((resolve) => {
        resolvePromise = resolve;
      });

      fetch.mockReturnValueOnce(mockPromise);

      const { result } = renderHook(() => useSuggestionHelper({
        artifactType: 'story',
        llmPayload: mockLlmPayload,
        setLlmResponse: mockSetLlmResponse
      }));

      // Start the async operation
      act(() => {
        result.current.getSuggestion();
      });

      // Check loading state is true
      expect(result.current.isSuggestionLoading).toBe(true);

      // Verify setLlmResponse was called with loading state for each item
      expect(mockSetLlmResponse).toHaveBeenCalledWith(expect.any(Function));

      // Test the function passed to setLlmResponse
      const updateFunction = mockSetLlmResponse.mock.calls[0][0];
      const mockPrev = [{ id: 1, feature_id: 'feat-1' }, { id: 2, feature_id: 'feat-2' }];
      const updatedItems = updateFunction(mockPrev);
      
      expect(updatedItems[0]).toEqual({
        ...mockPrev[0],
        suggestions: 'loading'
      });

      // Resolve the promise
      await act(async () => {
        resolvePromise({
          ok: true,
          status: 200,
          json: async () => ({ suggestions: ['test'] })
        });
      });

      // Check loading state is false
      expect(result.current.isSuggestionLoading).toBe(false);
    });
  });

  describe('getSuggestion - Feature Type', () => {
    const mockLlmPayload = [
      { id: 1, feature_id: 'feat-1' },
      { id: 2, feature_id: 'feat-2' }
    ];

    it('should successfully fetch suggestions for feature type', async () => {
      const mockSetLlmResponse = jest.fn();
      const mockResponseData = {
        data: [
          { feature_id: 'feat-1', data: { suggestions: ['Feature suggestion 1'] } },
          { feature_id: 'feat-2', data: { suggestions: ['Feature suggestion 2'] } }
        ]
      };

      fetch.mockResolvedValueOnce({
        ok: true,
        status: 200,
        json: async () => mockResponseData
      });

      const { result } = renderHook(() => useSuggestionHelper({
        artifactType: 'feature',
        llmPayload: mockLlmPayload,
        setLlmResponse: mockSetLlmResponse
      }));

      await act(async () => {
        await result.current.getSuggestion();
      });

      // Verify fetch was called with correct parameters for features
      expect(fetch).toHaveBeenCalledWith(
        `${mockQeAssistLmUrl}/api/suggest/features`,
        {
          method: 'POST',
          headers: {
            ...FETCHYE_OPTIONS.headers,
            'X-Correlation-ID': mockCorrelationId
          },
          body: JSON.stringify({
            artifactType: 'feature',
            featurePayload: mockLlmPayload
          })
        }
      );

      expect(result.current.suggestionData).toEqual({
        status: 200,
        body: mockResponseData
      });
    });

    it('should handle feature type response and update llmResponse correctly', async () => {
      const mockSetLlmResponse = jest.fn();
      const mockLlmPayload = [
        { id: 1, feature_id: 'feat-1', user_story_id: 'story-1' },
        { id: 2, feature_id: 'feat-2', user_story_id: 'story-2' }
      ];

      const mockResponseData = [
        { feature_id: 'feat-1', data: { suggestions: ['Suggestion for feat-1'] } },
        { feature_id: 'feat-2', data: { suggestions: ['Suggestion for feat-2'] } }
      ];

      fetch.mockResolvedValueOnce({
        ok: true,
        status: 200,
        json: async () => ({ body: { data: mockResponseData } })
      });

      const { result } = renderHook(() => useSuggestionHelper({
        artifactType: 'feature',
        llmPayload: mockLlmPayload,
        setLlmResponse: mockSetLlmResponse
      }));

      await act(async () => {
        await result.current.getSuggestion();
      });

      // Wait for useEffect to process the response
      await waitFor(() => {
        expect(mockSetLlmResponse).toHaveBeenCalledWith(expect.any(Function));
      });

      // Verify the mapping function works correctly
      const updateFunction = mockSetLlmResponse.mock.calls[mockSetLlmResponse.mock.calls.length - 1][0];
      const result_call = updateFunction(mockLlmPayload);
      
      expect(result_call[0]).toEqual(expect.objectContaining({
        suggestions: mockResponseData[0].data
      }));
    });
  });

  describe('Error Handling', () => {
    it('should handle API errors correctly', async () => {
      const mockSetLlmResponse = jest.fn();
      const mockError = new Error('API Error');

      fetch.mockRejectedValueOnce(mockError);

      // Spy on console.error to verify error logging
      const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});

      const { result } = renderHook(() => useSuggestionHelper({
        artifactType: 'story',
        llmPayload: [],
        setLlmResponse: mockSetLlmResponse
      }));

      await act(async () => {
        await result.current.getSuggestion();
      });

      // Verify error was logged
      expect(consoleSpy).toHaveBeenCalledWith('Suggestion API error', mockError);

      // Verify error state was set
      expect(result.current.suggestionData).toEqual({
        status: 500,
        body: null
      });

      // Verify loading state was reset
      expect(result.current.isSuggestionLoading).toBe(false);

      consoleSpy.mockRestore();
    });

    it('should handle HTTP error responses (400-599)', async () => {
      const mockSetLlmResponse = jest.fn();
      const mockLlmPayload = [{ id: 1, feature_id: 'feat-1' }];

      fetch.mockResolvedValueOnce({
        ok: false,
        status: 500,
        json: async () => ({ error: 'Internal server error' })
      });

      const { result } = renderHook(() => useSuggestionHelper({
        artifactType: 'feature',
        llmPayload: mockLlmPayload,
        setLlmResponse: mockSetLlmResponse
      }));

      await act(async () => {
        await result.current.getSuggestion();
      });

      // Verify error response was handled
      expect(result.current.suggestionData).toEqual({
        status: 500,
        body: { error: 'Internal server error' }
      });

      // Verify setLlmResponse was called with error state for items (status >= 400 && < 600)
      expect(mockSetLlmResponse).toHaveBeenCalledWith(expect.any(Function));
      
      // Get the function that was passed to setLlmResponse
      const updateFunction = mockSetLlmResponse.mock.calls[mockSetLlmResponse.mock.calls.length - 1][0];
      const mockPrev = [{ id: 1 }];
      const result_call = updateFunction(mockPrev);
      
      expect(result_call[0]).toEqual(expect.objectContaining({
        suggestions: 'error'
      }));
    });
  });

  describe('useEffect behavior for response processing', () => {
    it('should process story type response when status is 200 and has body data', async () => {
      const mockSetLlmResponse = jest.fn();
      const mockLlmPayload = [{ id: 1, feature_id: 'feat-1', user_story_id: 'story-1' }];

      const mockResponseData = { suggestions: ['story suggestion'] };

      fetch.mockResolvedValueOnce({
        ok: true,
        status: 200,
        json: async () => mockResponseData
      });

      const { result } = renderHook(() => useSuggestionHelper({
        artifactType: 'story',
        llmPayload: mockLlmPayload,
        setLlmResponse: mockSetLlmResponse
      }));

      await act(async () => {
        await result.current.getSuggestion();
      });

      // Wait for useEffect to process the response
      await waitFor(() => {
        expect(result.current.suggestionData?.status).toBe(200);
        expect(result.current.suggestionData?.body).toEqual(mockResponseData);
      });

      // Verify setLlmResponse was called to update with actual suggestions
      expect(mockSetLlmResponse).toHaveBeenCalledWith(expect.any(Function));
    });

    it('should process feature type response with data mapping', async () => {
      const mockSetLlmResponse = jest.fn();
      const mockLlmPayload = [
        { id: 1, feature_id: 'feat-1', user_story_id: 'story-1' },
        { id: 2, feature_id: 'feat-2', user_story_id: 'story-2' }
      ];

      const mockResponseData = [
        { feature_id: 'feat-1', data: { suggestions: ['Feature 1 suggestion'] } },
        { feature_id: 'feat-2', data: { suggestions: ['Feature 2 suggestion'] } }
      ];

      fetch.mockResolvedValueOnce({
        ok: true,
        status: 200,
        json: async () => ({ body: { data: mockResponseData } })
      });

      const { result } = renderHook(() => useSuggestionHelper({
        artifactType: 'feature',
        llmPayload: mockLlmPayload,
        setLlmResponse: mockSetLlmResponse
      }));

      await act(async () => {
        await result.current.getSuggestion();
      });

      // Wait for useEffect to process
      await waitFor(() => {
        expect(mockSetLlmResponse).toHaveBeenCalledWith(expect.any(Function));
      });

      // Test the mapping logic
      const updateFunction = mockSetLlmResponse.mock.calls[mockSetLlmResponse.mock.calls.length - 1][0];
      const updatedItems = updateFunction(mockLlmPayload);

      // Verify that items are matched by feature_id and updated with suggestions
      expect(updatedItems[0]).toEqual({
        ...mockLlmPayload[0],
        suggestions: mockResponseData[0].data
      });
      expect(updatedItems[1]).toEqual({
        ...mockLlmPayload[1],
        suggestions: mockResponseData[1].data
      });
    });

    it('should handle feature type response with no matching feature_id', async () => {
      const mockSetLlmResponse = jest.fn();
      const mockLlmPayload = [
        { id: 1, feature_id: 'feat-1', user_story_id: 'story-1' }
      ];

      const mockResponseData = [
        { feature_id: 'feat-999', data: { suggestions: ['Non-matching feature'] } }
      ];

      fetch.mockResolvedValueOnce({
        ok: true,
        status: 200,
        json: async () => ({ body: { data: mockResponseData } })
      });

      const { result } = renderHook(() => useSuggestionHelper({
        artifactType: 'feature',  
        llmPayload: mockLlmPayload,
        setLlmResponse: mockSetLlmResponse
      }));

      await act(async () => {
        await result.current.getSuggestion();
      });

      await waitFor(() => {
        expect(mockSetLlmResponse).toHaveBeenCalledWith(expect.any(Function));
      });

      // Test that items without matches return the original item
      const updateFunction = mockSetLlmResponse.mock.calls[mockSetLlmResponse.mock.calls.length - 1][0];
      const updatedItems = updateFunction(mockLlmPayload);

      expect(updatedItems[0]).toEqual(mockLlmPayload[0]); // No match found, return original
    });
  });

  describe('Edge Cases', () => {
    it('should handle empty llmPayload', async () => {
      const mockSetLlmResponse = jest.fn();

      fetch.mockResolvedValueOnce({
        ok: true,
        status: 200,
        json: async () => ({ suggestions: [] })
      });

      const { result } = renderHook(() => useSuggestionHelper({
        artifactType: 'story',
        llmPayload: [],
        setLlmResponse: mockSetLlmResponse
      }));

      await act(async () => {
        await result.current.getSuggestion();
      });

      expect(fetch).toHaveBeenCalledWith(
        expect.stringContaining('/api/suggest/story'),
        expect.objectContaining({
          body: JSON.stringify({
            artifactType: 'story',
            user_stories: []
          })
        })
      );
    });

    it('should generate new correlation ID for each request', async () => {
      const mockSetLlmResponse = jest.fn();
      
      uuidv4
        .mockReturnValueOnce('correlation-1')
        .mockReturnValueOnce('correlation-2');

      fetch.mockResolvedValue({
        ok: true,
        status: 200,
        json: async () => ({ suggestions: [] })
      });

      const { result } = renderHook(() => useSuggestionHelper({
        artifactType: 'story',
        llmPayload: [],
        setLlmResponse: mockSetLlmResponse
      }));

      // First call
      await act(async () => {
        await result.current.getSuggestion();
      });

      expect(fetch).toHaveBeenCalledWith(
        expect.any(String),
        expect.objectContaining({
          headers: expect.objectContaining({
            'X-Correlation-ID': 'correlation-1'
          })
        })
      );

      // Second call
      await act(async () => {
        await result.current.getSuggestion();
      });

      expect(fetch).toHaveBeenLastCalledWith(
        expect.any(String),
        expect.objectContaining({
          headers: expect.objectContaining({
            'X-Correlation-ID': 'correlation-2'
          })
        })
      );

      expect(uuidv4).toHaveBeenCalledTimes(2);
    });

    it('should handle null or undefined suggestionData.body', async () => {
      const mockSetLlmResponse = jest.fn();
      
      fetch.mockResolvedValueOnce({
        ok: true,
        status: 200,
        json: async () => null
      });

      const { result } = renderHook(() => useSuggestionHelper({
        artifactType: 'story',
        llmPayload: [{ id: 1 }],
        setLlmResponse: mockSetLlmResponse
      }));

      await act(async () => {
        await result.current.getSuggestion();
      });

      expect(result.current.suggestionData).toEqual({
        status: 200,
        body: null
      });

      // The useEffect should handle null body gracefully and not crash
    });
  });
});
